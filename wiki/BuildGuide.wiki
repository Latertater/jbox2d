#summary basic guide for building and using jbox2d
#labels Phase-Implementation

= Introduction =

JBox2D is a Java rigid body physics engine library.  It does not include any graphics support, you are expected to hook it up to your rendering library yourself (though the testbed includes a sample implementation using Java2D graphics, it is not intended to be a production-ready implementation).

This page will show you how to generally use/build jbox2d in any environment.

= Using JBox2D =
== Jar Releases ==
The jar releases have all dependencies included, so you just need to include them as an external library in your project.  This is a common option with most IDE's, and usually consists of:
  # Placing the jar in your project
  # Right clicking and choosing to include the jar in the build path.

If you need more help with this, please see help sources for your IDE.  If you're not using an IDE, then you shouldn't need help with this.

== Maven ==
JBox2D is released in Maven (or will be soon), so you should see it listed as an available dependency.

= Building JBox2D =
== Maven ==
The most recent versions of JBox2D lean on Maven to help handle dependency management, and if your IDE supports Maven, then this should be pretty easy.  To quickly get a project running you:

  # Check out the project through Subversion: `svn checkout http://jbox2d.googlecode.com/svn/trunk/ jbox2d-read-only`
  # Import to your IDE as a Maven project (using the pom.xml descriptor in the root folder)
  # Run the `org.jbox2d.testbed.framework.TestbedMain` class

If you're planning on doing some more in-depth customization, we would suggest adding each module project independently (jbox2d-library, jbox2d-serialization, jbox2d-testbed) and putting all of those projects in your workspace.

Note: 
  * You might receive errors about the jbox2d parent POM is not found.  In this case you'll have to run 'mvn install" on the root project (checked out like above).
  * If you're changing the protobuffer definition for serialization, you'll need the protobuffer library installed on your machine.  Download it [http://code.google.com/apis/protocolbuffers/docs/overview.html here].

== Non Maven ==
You'll have to include the dependencies yourself if you don't want to use Maven.  Fortunately, there are only a couple:

  # Standard Logging Facade for Java ([http://www.slf4j.org/ SLF4J])
  # [http://code.google.com/p/protobuf/downloads/list Protobuffers] for serialization (you might have to build it)

Include those and you should be good!